daemon off;
user root;
#user  nobody;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

events {
  worker_connections 65535;
#  reuse_port on;
}


# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

#    upstream backendjava  {
#      server   mytomcat1:8080 weight=10;
#      server   mytomcat2:8080 weight=10;
#      session_sticky;
#    }


    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '/usr/local/share/lua/5.1/?.lua;/usr/local/share/luajit-2.0.3/jit/?.lua;/usr/local/openresty/lualib/?.lua;';
    # set search paths for Lua external libraries written in C (can also use ';;'):
    lua_package_cpath '/usr/local/lib/lua/5.1/?.so;/usr/local/openresty/lualib/?.so;';


  server {
        listen     80 backlog=65535;
        server_name  localhost;

	      root /data/www;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   /data/www;
            index  index.html index.htm;
        }


#        location /java {
#          proxy_pass http://backendjava/;
#          root   /data/www;
#          index  index.html index.htm index.jsp;
#        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}

        location /images/ {
                      set $image_root /data/www;
                      set $file $image_root$uri;
                      set $forward_url "";
                      if (!-e $file) {
                      rewrite_by_lua '
                              local originalUri = nil;
                              local area = nil;
                              local index = string.find(ngx.var.uri, "([0-9]+)x([0-9]+)");
                              local oUIndex = nil;
                              local fileExtName = nil;
                              local fileSuffix = nil;
                              if  index ~= nil then
                                      originalUri = string.sub(ngx.var.uri, 0, index-2);
                                      oUIndex = string.find(originalUri,"([.])");
                                      fileExtName = string.sub(originalUri,oUIndex+1);
                                      fileSuffix = string.sub(originalUri,0,oUIndex-1);
                                      area = string.sub(ngx.var.uri, index);
                                      index = string.find(area, "([.])");
                                      if  index ~= nil then
                                              area = string.sub(area, 0, index-1);
                                      end;
                                end;
                              if originalUri ~= nil then
                                      local command = "gm convert " .. ngx.var.image_root..originalUri  .. " -thumbnail " .. area.."^" .. " -background gray -gravity center -extent " .. area .." ".. ngx.var.image_root..originalUri .."_" .. area .. "."..fileExtName;
                                      os.execute("echo command "..command .."  >>/usr/local/nginx/logs/gm.txt");
              os.execute(command);
                                      ngx.var.forward_url = fileSuffix.."_thumb."..fileExtName;
                              else
                                      ngx.var.forward_url = ngx.var.uri;
                              end;
                         ';
                       }
              }

    include   /usr/local/nginx/conf/nginx.d/lua.conf;
    include   /usr/local/nginx/conf/nginx.d/redis.conf;
    include   /usr/local/nginx/conf/nginx.d/lua-redis.conf;
    include   /usr/local/nginx/conf/nginx.d/lua-mysql.conf;
    include   /usr/local/nginx/conf/nginx.d/echo.conf;


    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
